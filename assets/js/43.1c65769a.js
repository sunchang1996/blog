(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{364:function(s,t,a){"use strict";a.r(t);var n=a(34),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"javascript-原型链-及-原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-原型链-及-原型模式"}},[s._v("#")]),s._v(" JavaScript 原型链 及 原型模式")]),s._v(" "),a("h3",{attrs:{id:"什么是原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是原型模式"}},[s._v("#")]),s._v(" 什么是原型模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function A () {\n  this.x = 100\n  this.y = 100\n  this.sum = function() {\n    console.log('私有的 sum', this.x + this.y)\n  }\n}\n\nA.prototype.getX = function() {\n  this.x += 200\n  console.log('x ---\x3e', this.x)\n}\nA.prototype.sum = function() {\n  console.log('调用公共的 sum', this.x + this.y)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("把一些公共的方法放到构建函数的原型上。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"})]),a("h3",{attrs:{id:"概念："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念："}},[s._v("#")]),s._v(" 概念：")]),s._v(" "),a("p",[s._v("每个函数数据类型（普通的函数/类）都有一个天生自带的属性： prototype，属性时对象数据类型\n并且在 prototype 上浏览器还天生给它加了一个属性叫 constructor （构造函数），属性值是当前函数（类）的本身\n每一个对象数据类型（普通的对象、实例、prototype）也都有一个天生自带的属性 "),a("strong",[s._v("proto")]),s._v(" 属性值是当前实例所属类的原型（prototype）")]),s._v(" "),a("ul",[a("li",[s._v("什么是原型链 ?\n例如：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const a = []\na.push('b')\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("a 是什么找到 push 方法的\n可以在控制台打印一下 a")]),s._v(" "),a("p",[s._v("可以看出 a 是通过一个叫 "),a("strong",[s._v("proto")]),s._v(" 的属性找到了 Array 上的 push 方法")]),s._v(" "),a("ul",[a("li",[s._v("概念")]),s._v(" "),a("li",[s._v("通过 对象名.属性名 的方式获取属性值的时候，首先会在对象的私有作用域查找，如果没有则通过 "),a("strong",[s._v("proto")]),s._v(" 找到对象所属类的原型，"),a("code",[s._v("如果原型上存在，取的是公共属性")]),s._v("，如果原型上没有则在通过 "),a("strong",[s._v("proto")]),s._v(" 继续找，一直找到 object.prototype 为止，这种的查找的机制，称为"),a("code",[s._v("原型链模式")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);