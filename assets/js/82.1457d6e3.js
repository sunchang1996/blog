(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{401:function(e,t,a){"use strict";a.r(t);var r=a(34),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"列举一种你了解的-react-状态管理框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列举一种你了解的-react-状态管理框架"}},[e._v("#")]),e._v(" 列举一种你了解的 React 状态管理框架")]),e._v(" "),a("p",[e._v("首先介绍 Flux，Flux 是一种使用单向数据流的形式来组合 React 组件的应用架构。")]),e._v(" "),a("h3",{attrs:{id:"flux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flux"}},[e._v("#")]),e._v(" Flux")]),e._v(" "),a("p",[e._v("Flux 包含了 4 个部分，分别是 Dispatcher、 Store、View、Action。Store 存储了视图层所有的数据，当 Store 变化后会引起 View 层的更新。如果在视图层触发一个 Action，就会使当前的页面数据值发生变化。Action 会被 Dispatcher 进行统一的收发处理，传递给 Store 层，Store 层已经注册过相关 Action 的处理逻辑，处理对应的内部状态变化后，触发 View 层更新。")]),e._v(" "),a("p",[e._v("Flux 的优点是单向数据流，解决了 MVC 中数据流向不清的问题，使开发者可以快速了解应用行为。从项目结构上简化了视图层设计，明确了分工，数据与业务逻辑也统一存放管理，使在大型架构的项目中更容易管理、维护代码。")]),e._v(" "),a("h3",{attrs:{id:"redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[e._v("#")]),e._v(" Redux")]),e._v(" "),a("p",[e._v("其次是 Redux，Redux 本身是一个 JavaScript 状态容器，提供可预测化状态的管理。社区通常认为 Redux 是 Flux 的一个简化设计版本，但它吸收了 Elm 的架构思想，更像一个混合产物。它提供的状态管理，简化了一些高级特性的实现成本，比如撤销、重做、实时编辑、时间旅行、服务端同构等。")]),e._v(" "),a("p",[e._v("Redux 的核心设计包含了三大原则：")]),e._v(" "),a("ol",[a("li",[e._v("单一数据源、")]),e._v(" "),a("li",[e._v("纯函数 Reducer、")]),e._v(" "),a("li",[e._v("State 是只读的。")])]),e._v(" "),a("p",[e._v("Redux 中整个数据流的方案与 Flux 大同小异。")]),e._v(" "),a("p",[e._v("Redux 中的另一大核心点是处理“副作用”，AJAX 请求等异步工作，或不是纯函数产生的第三方的交互都被认为是 “副作用”。这就造成在纯函数设计的 Redux 中，处理副作用变成了一件至关重要的事情。社区通常有两种解决方案：")]),e._v(" "),a("p",[e._v("第一类是在 Dispatch 的时候会有一个 middleware 中间件层，拦截分发的 Action 并添加额外的复杂行为，还可以添加副作用。第一类方案的流行框架有 Redux-thunk、Redux-Promise、Redux-Observable、Redux-Saga 等。")]),e._v(" "),a("p",[e._v("第二类是允许 Reducer 层中直接处理副作用，采取该方案的有 React Loop，React Loop 在实现中采用了 Elm 中分形的思想，使代码具备更强的组合能力。")]),e._v(" "),a("p",[e._v("除此以外，社区还提供了更为工程化的方案，比如 rematch 或 dva，提供了更详细的模块架构能力，提供了拓展插件以支持更多功能。")]),e._v(" "),a("p",[e._v("Redux 的优点很多：结果可预测；代码结构严格易维护；模块分离清晰且小函数结构容易编写单元测试；Action 触发的方式，可以在调试器中使用时间回溯，定位问题更简单快捷；单一数据源使服务端同构变得更为容易；社区方案多，生态也更为繁荣。")]),e._v(" "),a("h3",{attrs:{id:"mobox"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobox"}},[e._v("#")]),e._v(" Mobox")]),e._v(" "),a("p",[e._v("最后是 Mobx，Mobx 通过监听数据的属性变化，可以直接在数据上更改触发UI 的渲染。在使用上更接近 Vue，比起 Flux 与 Redux 的手动挡的体验，更像开自动挡的汽车。Mobx 的响应式实现原理与 Vue 相同，以 Mobx 5 为分界点，5 以前采用 Object.defineProperty 的方案，5 及以后使用 Proxy 的方案。它的优点是样板代码少、简单粗暴、用户学习快、响应式自动更新数据让开发者的心智负担更低。")])])}),[],!1,null,null,null);t.default=v.exports}}]);